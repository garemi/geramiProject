import Vue from "vue";
import { getErrorText } from "@/constants/VianaAxios";

/**
 * Error messages
 */
export const errors = Object.freeze({
  400: "درخواست اشتباه!",
  500: "مشکلی از سمت سرور پیش آمده است.",
  // Front
  600: "لطفا اطلاعات را به درستی وارد کنید.",
  601: "قبلا این کاربر را دنبال کردید",
  602: "لطفا ابتدا وارد حساب کاربری خود شوید.",
  603: "برای دنبال کردن شخص وارد حساب کاربری خود شوید.",
  604: "برای ارسال پیشنهاد همکاری وارد حساب کاربری خود شوید.",
  605: "لطفا پیامی بنویسید!",
  606: "لطفا کد تایید به درستی وارد نمایید",
  607: "رمز های وارد شده یکسان نمی باشد",
  608: "لطفا اطلاعات را به درستی وارد نمایید",
  609: "کد ملی تکراری یا اشتباه است",
  610: "لطفا حداقل یک ویژگی را انتخاب کنید!",
  611: "حداکثر 150 کاراکتر مجاز است.",
  612: "کد تخفیف نا معتبر است",
  613: "برای ثبت گزارش وارد حساب کاربری خود شوید",
  614: "حداقل یک مرحله پرداخت ایجاد کنید",
  615: "برای ثبت نظر وارد حساب کاربری خود شوید",
  616: "حداقل یک سرفصل ایجاد کنید",
  617: "بیشتر از 6 عکس نمی‌توانید آپلود کنید",
  618: "حداقل یک عکس برای پروژه اپلود کنید",
  619: "مبلغ وارد شده بیش از موجودی کیف پول می‌باشد.",
  620: "برای ثبت پیشنهاد باید فریلنسر باشید.",
  621: "اسلاگ تکراری است. لطفا در نامگذاری مقاله دقت کنید. اسلاگ همان نام پست میباشد.",
  622: "برای ثبت پروژه باید با اکانت کارفرما وارد شوید",
  623: "مبلغ وارد شده در درخواست های امن شما با مبلغ پیشنهاد شما مغایرت دارد.",
  624: "لطفا علت درخواست داوری را وارد نمایید",
  625: "حداقل یک زمان انتخاب کنید",
  626: "لطفا قوانین و مقررات  را بپذیرد",
  627: "لطفا ابتدا نوع مدرک شناسایی خود را مشخص کنید.",
  628: "سرویس وارده ایجاد نشده یا فیلد سرویس خالی است",
  629: "لطفا نوع پیام را انتخاب کنید",
});

/**
 * ALl other messages EXCEPT errors (like success, warning and etc.)
 */
export const messages = Object.freeze({
  1001: "با موفقیت ثبت شد.",
  1002: "با موفقیت وارد شدید. خوش آمدید :)",
  1003: "در حال انتقال به درگاه پرداخت",
  1004: "با موفقیت ایجاد شد.",
  1005: "با موفقیت حذف شد.",
  1006: "با موفقیت ویرایش شد.",
});

/**
 * show a toast message from the specified id you pass
 * @param {number} id - message ID that the developer is looking for
 * @param {("success" | "warning" | "info" | "error")} [type] - type of toast (apply toast color) / default = success
 */
export const showMessage = (id, type = "success") =>
  Vue.$toast[type](messages[id] || "");

/**
 * pass the error directly to this function
 * @param {string | number | Object<any>} error
 */
export const showError = (error) => Vue.$toast.error(getErrorText(error));

export default { messages, errors, showMessage, showError };
